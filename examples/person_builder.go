// Code generated by BuilderGen v0.3.0
package examples

import (
	"github.com/Jh123x/buildergen/examples/nested"
	"golang.org/x/tools/imports"
	"os"
)

type PersonBuilder struct {
	ID        int
	Name      string
	Email     *string
	PhoneBook []*Contact
	MapVal    map[string]string `json:"map_val"`
	T         nested.Test
}

func NewPersonBuilder(b *Person) *PersonBuilder {
	if b == nil {
		return nil
	}

	return &PersonBuilder{
		ID:        b.ID,
		Name:      b.Name,
		Email:     b.Email,
		PhoneBook: b.PhoneBook,
		MapVal:    b.MapVal,
		T:         b.T,
	}
}

func (b *PersonBuilder) WithID(iD int) *PersonBuilder {
	b.ID = iD
	return b
}

func (b *PersonBuilder) WithName(name string) *PersonBuilder {
	b.Name = name
	return b
}

func (b *PersonBuilder) WithEmail(email *string) *PersonBuilder {
	b.Email = email
	return b
}

func (b *PersonBuilder) WithPhoneBook(phoneBook []*Contact) *PersonBuilder {
	b.PhoneBook = phoneBook
	return b
}

func (b *PersonBuilder) WithMapVal(mapVal map[string]string) *PersonBuilder {
	b.MapVal = mapVal
	return b
}

func (b *PersonBuilder) WithT(t nested.Test) *PersonBuilder {
	b.T = t
	return b
}

func (b *PersonBuilder) Build() *Person {
	return &Person{
		ID:        b.ID,
		Name:      b.Name,
		Email:     b.Email,
		PhoneBook: b.PhoneBook,
		MapVal:    b.MapVal,
		T:         b.T,
	}
}

type UnRelatedBuilder struct {
	importOpts *imports.Options
	otherOpts  *os.FileMode
}

func NewUnRelatedBuilder(b *UnRelated) *UnRelatedBuilder {
	if b == nil {
		return nil
	}

	return &UnRelatedBuilder{
		importOpts: b.importOpts,
		otherOpts:  b.otherOpts,
	}
}

func (b *UnRelatedBuilder) WithimportOpts(importOpts *imports.Options) *UnRelatedBuilder {
	b.importOpts = importOpts
	return b
}

func (b *UnRelatedBuilder) WithotherOpts(otherOpts *os.FileMode) *UnRelatedBuilder {
	b.otherOpts = otherOpts
	return b
}

func (b *UnRelatedBuilder) Build() *UnRelated {
	return &UnRelated{
		importOpts: b.importOpts,
		otherOpts:  b.otherOpts,
	}
}
